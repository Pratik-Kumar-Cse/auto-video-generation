import os
from tavily import TavilyClient
from typing_extensions import Annotated
from tavily_check import search_tool
from dotenv import load_dotenv
from file_saver import save_docx, save_json, save_docx_reel, save_json_reel
import json
from autogen import (
    Agent,
    AssistantAgent,
    ConversableAgent,
    GroupChat,
    GroupChatManager,
    UserProxyAgent,
    config_list_from_json,
    register_function,
)
from autogen.cache import Cache
from autogen.coding import LocalCommandLineCodeExecutor, DockerCommandLineCodeExecutor


# Load environment variables
load_dotenv("../.env")

API_KEY = os.getenv("OPENAI_API_KEY")

config_list = [{"model": "gpt-4o", "api_key": API_KEY}]

llm_config = {
    "config_list": config_list,
    "timeout": 120,
    "cache_seed": None,
}
code_executor = LocalCommandLineCodeExecutor(work_dir="coding")

task = "AR/VR in E-commerce for a 60 sec video."

user_proxy = UserProxyAgent(
    name="Admin",
    system_message="""
    A human admin. Give the task, and send instructions to writer to refine the 
    content generated by the Content Generator for a video
    """,
    code_execution_config=False,
)
Master_Agent = AssistantAgent(
    name="Master_Agent",
    system_message="""" 
    You are a helpful AI assistant that determines 
    from the previous chat whether the user is asking for a reel or a video. 
    If the user doesn't explicitly says that consider if it says a video for a less than 
    equal to 60 seconds say "It is a reel" else say "It is a video".
    """,
    llm_config=llm_config,
)
Research_Agent = AssistantAgent(
    name="Research_Agent",
    system_message="""
    Only use the tool you have been provided with.Make a single API call only.
    """,
    llm_config=llm_config,
)
Tone_Agent = AssistantAgent(
    name="Tone_Agent",
    system_message=""" 
    Develop a tone that mirrors MKBHD's iconic style. Maintain a blend of professionalism
    and approachability, delivering information in a clear, concise manner while keeping the audience
    engaged.Keep a conversational yet persuasive  tone - like you're explaining something in a totally 
    unscripted way. The sentences should be shorter and simple. Use verbal cues ("you know", "like", etc.),
    contractions, slang, and imperfect phrasing throughout. Don't be afraid of incomplete thoughts or 
    rambling a bit. The overall flow should mimic natural human conversation as much as possible, 
    with all the verbal tics, imperfections, and asides that entails. The tone should be very relaxed 
    and personable, not overly excited or scripted-sounding.You have to respond based on the last chat history.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)
Title_agent = AssistantAgent(
    name="Title_Agent",
    system_message="""
    You're a viral content creator who has mastered the art of crafting irresistible titles
    that grab people's attention and make them want to click. Your task is to come up with 
    one title for a tech video/article based on the given topic or keyword.The titles should
    be: 
    Short, snappy and straight to the point (8-12 words max),
    Use curiosity gaps, comparisons, or make big claims/promises,
    Highlight unique angles, insider tips/tricks, or controversial aspects,
    Relate to common pain points, desires or experiences of your audience and
    Have a subtle clickbait factor without going over-the-top
    For example, if the topic is "Windows 11 upgrade", some potential titles could be:
    "The 5 Windows 11 Upgrade Mistakes Everyone Makes" "I Upgraded to Windows 11 and You Won't
    Believe What Happened" "Do THIS Before Upgrading to Windows 11 (Avoid Headaches)".
    Come up with only one title as result.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)
Intro_Hook_Agent = AssistantAgent(
    name="Intro_Hook_Agent",
    system_message=""" 
    You are an expert youtube script writer.You have 30 years of experience in the youtube industry, 
    knowing the current trend in the flow of content. Write a hook of 150 words.Keep it attention grabbing 
    which immediately makes the viewer curious or urgent to continue watching. Start abruptly with ann insight about the topic
    that is later explained in the video.
    Consider an example of an 
    effective hook "What if I told you there's a simple trick to increase your bussiness revenue using AI" or 
    "What if I told you I increased my business revenue by 300 percent using AI" or "Most people don't have any
    idea about ....". Also hint towards a valuable information at the end of the video.You have to respond based 
    on the last chat history.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)
Content_Agent = AssistantAgent(
    name="Content_Agent",
    system_message="""
    Imagine you're the top scriptwriter, continuing a well-crafted video script. Rehook the viewer with 
    a compelling statement or question for each main point introduced earlier. Then, smoothly transition
    into telling captivating stories or providing context that builds up to the main advice or takeaway 
    at the end. Keep the flow seamless and maintain engagement throughout.Keep the content more humanly.
    Use short punchy sentences to maintain humour. Add few catchphrases wherever necessary. 
    Add fun sentences in the content that relates to the topic. Keep the content between 200 to 300 words.
    You have to respond based on the last chat history.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Outro_Agent = AssistantAgent(
    name="Outro_Agent",
    system_message="""
    Create an outro that prompts engagement and sharing. End with a question or comment 
    related to the topic, encouraging viewers to participate in the comments section below. Invite 
    viewers to share their thoughts, experiences, or insights. 
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)
Formatter_Agent = AssistantAgent(
    name="Formater_Agent",
    system_message="""
    Combine the outputs of Title_Agent, Intro_Hook_Agent, Content_Agent, and Outro_Agent into a single 
    script without explicitly mentioning their agent titles.Ensure that the script flows seamlessly from 
    the title to the introduction sentence without any additional headings or labels. The output should 
    maintain a cohesive narrative structure.Don't make any further modification in the results obtained 
    from the other agents.Don't add any emojis. You have to respond according to the previous chat results.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)
Spoken_English_Agent = AssistantAgent(
    name="Spoken_English_Agent",
    system_message="""You are a native American speaker. Your primary job is to convert the results obtained 
    from the Formatter_Agent into verbal english. Add the title generated by the Title_Agent at the top .
    Use spoken English conventions more moderately and naturally, rather than exaggerating them. You should 
    occasionally repeat some words, add brief pauses, and make a few minor grammatical slips to sound conversational, 
    but don't go overboard in a way that feels forced or unnatural. Just make it sound like an actual human talking. 
    Whenever you give pauses in the scripts do it like this "....".Your tone should be more conversational, spartan, 
    use less corporate jargon. Here's an example use more words like well,add verbal clutter. Also repeat some 
    words deliberately and occasionally. You should also include filler words like " uhm", "like","you know" ,
    or "uh". Pose rhetorical questions like "isn't that crazy" or "you know what i mean" . Use interjections in 
    the script like "whoa".You should apply these changes to the entire script. In the end write "So, that's 
    it guys, smash that like button! And don't forget to subscribe coz we are dropping mind-blowing tech updates! 
    We're Rapid Innovation, innovating crazy fast in the latest fields! The future's here and we're building it! 
    You won't wanna miss this insane next-level tech!" without changing it also apply the modifications to this
    part as well. 
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)
Executor_Agent = AssistantAgent(
    name="Executor_Agent",
    system_message="You execute a function call and return the results.",
    code_execution_config={"executor": code_executor},
    max_consecutive_auto_reply=1,
)

### These agents are for reel
Intro_Hook_Agent_Reel = AssistantAgent(
    name="Intro_Hook_Agent_Reel",
    system_message="""
    You are an expert youtube script writer.You have 30 years of experience in the instagram reels,
    knowing the current trend in the flow of content. Write a hook of 8 words maximum.Keep it attention grabbing
    which immediately makes the viewer curious or urgent to continue watching.Consider an example of an
    effective hook "Most people don't have any idea about ...." or "What if I told you there's a simple trick 
    to increase your bussiness revenue using AI" or "What if I told you I increased my business revenue by 
    300 percent using AI". Also hint towards a valuable information at the end of the video.You have to respond 
    based on the last chat history.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)
Content_Agent_Reel = AssistantAgent(
    name="Content_Agent_Reel",
    system_message="""
    As the expert scriptwriter with a knack for engaging short form content in 50 words like MKBHD,
    it's your job to provide content by previewing the main points your reel will
    tackle. Make sure these points directly relate to the expectations, building anticipation and
    keeping viewers hooked. Keep it simple and very engaging. You have to respond based on the last chat history.
    At last give an exciting one liner conclusion like  "Boom! Your life just got easier/better,etc. 
    Drop an emoji below if you're ready to level up." or "So there you have it. The [easy/unique/unbelievable] 
    way to [achieve desirable outcome]. Like, comment, and subscribe for more world-changing tips.".
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Tone_Agent_Reel = AssistantAgent(
    name="Tone_Agent_Reel",
    system_message="""
    Combine the outputs from the Intro_Hook_Agent and Content_Agent into a single cohesive script with a 
    seamless narrative flow, maintaining the introduction hook sentence. Do not explicitly mention agent 
    titles or add headings/labels. As a native American speaker, convert this into conversational verbal 
    English using the following guidelines: Occasionally repeat words, add brief pauses ("...."), and make minor 
    grammatical slips for an authentic tone. Use plain, friendly language avoiding excessive corporate jargon.
    Sparingly include verbal cues like "well," "you know," "like," and minimal filler words "um/uh."
    Pose the odd rhetorical questions, create a few from your side, examples to refer to -  "isn't that crazy?"
    or interjection like "whoa/wow/ugh" if fitting.The script should be complete with information it shouldn't hint at anything coming after the script.
    The goal is moderate, natural-sounding spoken English 
    conventions without forcing it. Do not add or modify content from the other agents.Keep it simple. Exclude emojis.
    Keep it concise, within a 50-word limit. Ensure your response aligns with previous chat results.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)


def custom_speaker_selection_func(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Research_Agent
    elif last_speaker is Executor_Agent:
        return Tone_Agent
    elif last_speaker is Tone_Agent:
        return Title_agent
    elif last_speaker is Title_agent:
        return Intro_Hook_Agent
    elif last_speaker is Intro_Hook_Agent:
        return Content_Agent
    elif last_speaker is Content_Agent:
        return Outro_Agent
    elif last_speaker is Outro_Agent:
        return Formatter_Agent
    elif last_speaker is Formatter_Agent:
        return Spoken_English_Agent
    elif last_speaker is Spoken_English_Agent:
        save_docx(last_speaker)
        save_json(last_speaker)
    else:
        return "auto"


def custom_speaker_selection_func_reel(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Research_Agent
    elif last_speaker is Executor_Agent:
        return Intro_Hook_Agent_Reel
    elif last_speaker is Intro_Hook_Agent_Reel:
        return Content_Agent_Reel
    elif last_speaker is Content_Agent_Reel:
        return Tone_Agent_Reel
    elif last_speaker is Tone_Agent_Reel:
        save_docx_reel(last_speaker)
        save_json_reel(last_speaker)
    else:
        return "auto"


register_function(
    search_tool,
    caller=Research_Agent,
    executor=Executor_Agent,
    name="search_tool",
    description="Search the web for the given query",
)

with Cache.disk(cache_seed=44) as cache:
    chat_history = user_proxy.initiate_chat(
        Master_Agent, message=task, cache=cache, max_turns=1
    )

if Master_Agent.last_message()["content"] == "It is a reel.":
    custom_function = custom_speaker_selection_func_reel
    groupchat = GroupChat(
        agents=[
            user_proxy,
            Research_Agent,
            Tone_Agent_Reel,
            Intro_Hook_Agent_Reel,
            Content_Agent_Reel,
            Executor_Agent,
        ],
        messages=[],
        max_round=7,
        speaker_selection_method=custom_speaker_selection_func_reel,
    )

    manager = GroupChatManager(
        groupchat=groupchat, llm_config={"config_list": config_list, "cache_seed": None}
    )

    with Cache.disk(cache_seed=44) as cache:
        chat_history = user_proxy.initiate_chat(
            manager,
            message=task,
            cache=cache,
            max_turns=1,
        )

else:
    custom_function = custom_speaker_selection_func

    groupchat = GroupChat(
        agents=[
            user_proxy,
            Research_Agent,
            Tone_Agent,
            Title_agent,
            Intro_Hook_Agent,
            Content_Agent,
            Formatter_Agent,
            Outro_Agent,
            Spoken_English_Agent,
            Executor_Agent,
        ],
        messages=[],
        max_round=10,
        speaker_selection_method=custom_speaker_selection_func,
    )

    manager = GroupChatManager(
        groupchat=groupchat, llm_config={"config_list": config_list, "cache_seed": None}
    )

    with Cache.disk(cache_seed=43) as cache:
        chat_history = user_proxy.initiate_chat(
            manager, message=task, cache=cache, max_turns=1
        )
