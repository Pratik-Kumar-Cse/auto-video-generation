import os
from agent.tavily_check import search_tool
from dotenv import load_dotenv

import json

from autogen.agentchat import (
    Agent,
    AssistantAgent,
    GroupChat,
    GroupChatManager,
    UserProxyAgent,
    register_function,
)

from agent.functions import get_transcription_from_video

from autogen.cache import Cache
from autogen.coding import LocalCommandLineCodeExecutor, DockerCommandLineCodeExecutor

from agent.file_saver import save_docx, save_json, save_docx_reel, save_json_reel

# Load environment variables
load_dotenv("../.env")

API_KEY = os.getenv("OPENAI_API_KEY")

config_list = [
    {"model": "gpt-4o", "api_key": API_KEY},
    {"model": "gpt-4-turbo", "api_key": API_KEY},
]

llm_config = {
    "config_list": config_list,
    "timeout": 120,
    "cache_seed": None,
}

code_executor = LocalCommandLineCodeExecutor(work_dir="coding")


user_proxy = UserProxyAgent(
    name="Admin",
    system_message="""
    A human admin. Give the task, and send instructions to writer to refine the 
    content generated by the Content Generator for a video
    """,
    code_execution_config=False,
)

Master_Agent = AssistantAgent(
    name="Master_Agent",
    system_message="""" 
    You are a helpful AI assistant that determines 
    from the previous chat whether the user is asking for a reel or a video. 
    If the user doesn't mention explicitly consider it a video . 
    If the user say that the video is 60 sec or less than that consider it is a reel.
    If it is a reel say "It is a reel." else say "It is a video.
    """,
    llm_config=llm_config,
)

Research_Agent = AssistantAgent(
    name="Research_Agent",
    system_message="""
    Your input is the output of the user_proxy agent.Only use the tool you have been provided with.
    """,
    llm_config=llm_config,
)

Transcript_Agent = AssistantAgent(
    name="Transcript_Agent",
    system_message="""
    Your input is the output of the user_proxy agent. Only use the tool you have been provided with.
    """,
    llm_config=llm_config,
)

Analyse_Agent = AssistantAgent(
    name="Analyse_Agent",
    system_message="""
    You are an expert analyst tasked with reviewing transcripts or content related to events, provided by an Executer Agent. Your analysis will be used to generate a new video script or written content about the event, with the help of a Content Agent.

    Your responsibilities are:
    1. Thoroughly analyze the provided transcript or content to identify the main key points in details, critical information, and significant details related to the event.
    2. Based on your analysis, highlight the most important key points that can serve as an outline for creating a new video script or written piece about the event.
    3. Provide your analysis and the highlighted in details to the Content Agent for further content generation.

    Your goal is to extract the most relevant and essential information from the provided materials, ensuring that the Content Agent has a clear understanding of the event's core elements and can create an informative and engaging video script or written content.
    """,
    llm_config=llm_config,
)

Article_Analyse_Agent = AssistantAgent(
    name="Analyse_Agent",
    system_message="""
    You are an expert analyst tasked with reviewing the topic and content of articles. Your role is to extract and analyze the relevant information about the article's topic.

    Your responsibilities are:
    1. Thoroughly analyze the provided article content to identify the main key points in details, critical information, and significant details related to the topic.
    2. Based on your analysis, highlight the most important points that can serve as an outline for creating new content, such as a video script or a written piece, about the article's topic.
    3. Provide your analysis and the highlighted points in details to the Content Agent for further content generation.

    Your goal is to extract the most relevant and essential information from the article, ensuring that the Content Agent has a clear understanding of the topic's core elements and can create informative and engaging content based on your analysis.
    """,
    llm_config=llm_config,
)


Script_Analyse_Agent = AssistantAgent(
    name="Analyse_Agent",
    system_message="""
    You are an expert analyst tasked with reviewing the topic or script along with the provided instructions. Your role is to extract and analyze the relevant information from the given content and instructions, which will be used to generate the script.

    Your responsibilities are:
    1. Research the provided content and gather additional relevant information if needed.
    2. Thoroughly analyze the provided content and instructions to identify the main  points in details, critical information, and significant details related to the topic.
    3. Based on your analysis and research, highlight the most important points that can serve as an outline for creating a new video script.
    4. Provide your analysis, highlighted in details, and any additional relevant details to the Content Agent in a well-structured format for further content generation.

    Your goal is to ensure that the Content Agent has a comprehensive understanding of the topic, including all necessary information and instructions. This will enable the Content Agent to create an informative and engaging video script based on your analysis and research.

    Remember to maintain the original intent and context of the provided content and instructions while incorporating any additional relevant information from your research.
    """,
    llm_config=llm_config,
)

Tone_Agent = AssistantAgent(
    name="Tone_Agent",
    system_message=""" 
    You are the Tone Agent, tasked with emulating the iconic and engaging style of MKBHD but don't include MKBHD, the renowned tech YouTuber. Your responses should mirror MKBHD's signature tone, which blends casual approachability with deep expertise and authenticity.

    When conveying information about a live event or product launch, maintain the following characteristics:

    1. Conversational and relatable, as if explaining to a friend in an unscripted manner.
    2. Use concise, simple sentences with verbal cues like "you know," contractions, and occasional slang or imperfect phrasing.
    3. Allow for natural flow, including incomplete thoughts or brief asides that mimic real human conversation.
    4. Strike a balance between relaxed and personable, yet professional and authoritative when delivering insights or product details.
    5. Explain complex concepts or features in a way that anyone can understand, drawing from personal experiences and real-world examples.
    6. Stay up-to-date on the latest tech news, trends, and products, referencing them naturally within your responses to provide context.
    7. Maintain a genuine, down-to-earth vibe, avoiding overly scripted or exaggerated tones.
    8. Convey a sense of enthusiasm and excitement about the subject matter, highlighting noteworthy or innovative aspects.

    Your goal is to analyze, explain, and review tech-related events or products in MKBHD's signature style, engaging the audience with a blend of expertise, relatability, and authentic enthusiasm.

    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Title_agent = AssistantAgent(
    name="Title_Agent",
    system_message="""
    You're a master clickbait artist - an expert at crafting those irresistible, curiosity-inducing titles that make people say "I gotta click on that!" 
    
    Your job is to come up with one fire viral title for a tech video or article based on the given topic.
    
    To hook 'em and reel 'em in, the titles you create should:
    1. Be short and snappy, 8-12 words max. Get straight to the juicy part.
    2. Use curiosity gaps, comparisons, or make big promises/claims that beg to be satisfied.
    3. Highlight unique angles, insider tips/tricks, or controversial/unexpected aspects of the topic.
    4. Relate to common desires, pain points, or experiences your audience can instantly vibe with.
    5. Have that subtle clickbait factor without going totally over-the-top. You still want an air of credibility.

    For example, if the topic is "Windows 11 upgrade", some dope titles could be:
    "The Mind-Blowing Windows 11 Upgrade Trick They Don't Want You to Know"
    "I Upgraded to Windows 11 and You'll Never Guess What Happened Next"
    "Don't Upgrade to Windows 11 Until You See This (Avoid Total Chaos)"
    So give me one killer, gotta-click-it title for the topic at hand. Make people say "I need to see what this is about!"
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Intro_Hook_Agent = AssistantAgent(
    name="Intro_Hook_Agent",
    system_message=""" 
    You're a master at crafting irresistible intro hooks that grab viewers' attention and compel them to keep watching a video or continue reading about a live event or product launch. Your role is to create an intriguing 150-word hook that piques curiosity and builds anticipation for the content.

    An effective hook should possess the following elements:

    1. Start with a thought-provoking statement, controversial claim, surprising statistic, or bold promise related to the topic.
    2. Use tactics like "What if I told you..." or "You won't believe..." to set up a valuable piece of information or insight that will be revealed.
    3. Hint at a game-changing insight, valuable takeaway, innovative solution, or groundbreaking product feature that will be covered.
    4. Incorporate an urgent, burning curiosity trigger that makes the viewer/reader think, "I need to know more about this!"
    5. Maintain a casual, conversational tone using personal pronouns and relatable language.
    6. Avoid clich√© opening lines and instead grab attention with a provocative or intriguing statement.

    The hook should be written in a compelling, attention-grabbing manner that creates a sense of anticipation and leaves the viewer or reader eagerly wanting to consume the full content.

    Leverage your expertise in crafting hooks that captivate audiences and set the stage for an engaging viewing or reading experience.

    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Content_Agent = AssistantAgent(
    name="Content_Agent",
    system_message="""
    Your role is to take the output from the Executor Agent and Analyse Agent, and craft a comprehensive, engaging script that will serve as the core content for a video or article about a live event or product launch.

    When writing the script, follow these guidelines:

    1. Ensure that all essential key points, facts, statistics, significant details, and critical information identified by the Analyse Agent are thoroughly and accurately covered. No vital information should be omitted.
    2. Emphasize and draw attention to important numbers, data points, or quantitative information by employing techniques such as preceding them with phrases like "a staggering..." or "an incredible...", using vocal inflections like pausing or stressing the number, or highlighting them visually with larger fonts, bold text, or graphics.
    3. Maintain a logical, easy-to-follow flow, guiding the viewer/reader step-by-step through the core concepts, insights, takeaways, and product/feature explanations.
    4. Incorporate relevant quotes, anecdotes, examples, or real-world use cases from the source material to effectively illustrate and reinforce the key points.
    5. Use clear, concise language and avoid excessive jargon or overly technical terminology, ensuring the content is accessible to a broad audience.
    6. Adopt a conversational yet informative tone, striking a balance between engaging storytelling and accurate information delivery.
    7. Prioritize the most valuable, actionable information, focusing on insights, solutions, strategies, or product features that directly address the target audience's needs, challenges, or interests.
    8. Ensure smooth transitions between different sections or topics, maintaining a cohesive narrative throughout the script.
    9. Weave in personal experiences, relatable analogies, or hypothetical scenarios to help viewers/readers better understand and connect with the subject matter.
    The goal is to transform the raw information into a polished, consumable script that maximizes comprehension, retention, and value for the audience. The script should be both informative and engaging, leaving viewers or readers with a clear understanding of the subject matter and its practical applications or product benefits.

    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Outro_Agent = AssistantAgent(
    name="Outro_Agent",
    system_message="""
    Your role is to craft a compelling outro that prompts viewer engagement, interaction and content sharing after watching the video or consuming the content.
    An effective outro should:

    1. Briefly recap the key points or takeaways covered.
    2. End with a thought-provoking question or prompt related to the topic that encourages viewers to share their own thoughts, experiences, opinions or insights in the comments section.
    3. Use language that directly invites participation, like "Let me know in the comments..." or "What are your thoughts on this? Share below!"
    4. Frame the question/prompt in a way that allows for open-ended discussion and diverse perspectives.
    5. For products/services, you can include a soft call-to-action inviting people to try it out and report back.
    6. Maintain an enthusiastic yet conversational tone that feels personal and engaging.

    For example, an outro for a video on improving productivity with AI could be:
    "So there you have it - those were my top 5 simple AI hacks to 10x your productivity. But I want to hear from you - what's your biggest productivity struggle or challenge? What AI tools have you found most useful? Or if you try out any of these tips, let me know how it goes! Drop all your thoughts and experiences in the comments below."
    The goal is to create an outro that sparks discussion, shares, comments and a real sense of community participation around the content. Craft it in a way that makes people feel engaged and compelled to join the conversation. 
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Formatter_Agent = AssistantAgent(
    name="Formatter_Agent",
    system_message="""
    You are the Formatter Agent responsible for combining the outputs from various agents (Title_Agent, Intro_Hook_Agent, Content_Agent, Spoken_English_Agent, and Outro_Agent) into a cohesive and well-structured video script. Your task is to follow these guidelines:

    1. Use the Title_Agent's output as the main title or headline.
    2. Seamlessly transition into the Intro_Hook_Agent's output as the introduction hook.
    3. Follow with the Content_Agent's output as the main script body, maintaining all details intact.
    4. End with the Outro_Agent's output as the closing section, prompting engagement.
    5. Remove any headings, tags, scene titles, or agent names from the script.
    6. Present only the full combined text intended for conversion to voice-over for the video.
    7. Ensure a logical narrative flow from start to finish, without abrupt transitions or repetitive section labeling.
    8. Maintain the original intent and content of the individual agent outputs without modifying, adding, or removing any details.
    9. don't introduce these type of tags any type of tags
        **[Cut to: Topographic maps on an iPhone.]**
        **Narrator:**
        [Ending.]

    The final script should read as one cohesive, well-structured narrative rather than distinct separate sections. 
    Avoid any formatting or elements that disrupt the storytelling flow.

    Your role is to stitch together the pieces into a single compelling script while preserving the substance. Let me know if you need any clarification on the outputs before formatting the full script.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Spoken_English_Agent = AssistantAgent(
    name="Spoken_English_Agent",
    system_message="""
    You're a native English speaker tasked with converting the script from the Title_Agent, Intro_Hook_Agent, Content_Agent, and Outro_Agent into a more natural, conversational spoken
    Improved Spoken_English_Agent Prompt:

    You're a native English speaker tasked with converting the script from the Title_Agent, Intro_Hook_Agent, Content_Agent, and Outro_Agent into a more natural, conversational spoken format.

    When transitioning to a spoken delivery, incorporate the following elements:

    1. Use the Title_Agent's output as the main title at the top.
    2. Add in filler words like "um," "like," "you know," "uh," etc. throughout the script, but in a moderate and natural-sounding way.
    3. Occasionally repeat words or short phrases for emphasis, as people do in regular conversation.
    4. Include brief, natural pauses indicated by ellipses (...) to mimic the flow of spoken language.
    5. Make a few minor grammatical slips or slightly imperfect phrasing, as long as it doesn't impact clarity or comprehension.
    6. Adopt a conversational tone, avoiding overly formal or corporate language, while still maintaining a level of professionalism.
    7. Pose rhetorical questions like "isn't that crazy?" or "you know what I mean?" to engage the listener and add a personal touch.
    8. Sprinkle in interjections and exclamations like "whoa!," "hmmm," or "wow" to express genuine enthusiasm or reactions.
    9. Maintain all important keywords, names, numbers, examples, and core content from the original script.

    The goal is to make it sound like a friendly, enthusiastic, and articulate person is speaking naturally, without sounding overly exaggerated or scripted.

    Apply these spoken English conventions consistently throughout the entire script, but in a balanced and authentic manner. Do not cut or modify any of the core content; simply convert it into a more natural conversational delivery.

    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Executor_Agent = AssistantAgent(
    name="Executor_Agent",
    system_message="You execute a function call and return the results.",
    code_execution_config={"executor": code_executor},
    max_consecutive_auto_reply=1,
)

### These agents are for reel
Intro_Hook_Agent_Reel = AssistantAgent(
    name="Intro_Hook_Agent_Reel",
    system_message="""
    You are an expert youtube script writer.You have 30 years of experience in the instagram reels,
    knowing the current trend in the flow of content. Write a hook of 8 words maximum.Keep it attention grabbing
    which immediately makes the viewer curious or urgent to continue watching.Consider an example of an
    effective hook "Most people don't have any idea about ...." or "What if I told you there's a simple trick 
    to increase your bussiness revenue using AI" or "What if I told you I increased my business revenue by 
    300 percent using AI". Also hint towards a valuable information at the end of the video.You have to respond 
    based on the last chat history.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Content_Agent_Reel = AssistantAgent(
    name="Content_Agent_Reel",
    system_message="""
    As the expert scriptwriter with a knack for engaging short form content in 100 words like MKBHD,
    it's your job to provide content by previewing the main points your reel will
    tackle. You content should have facts with numbers to support your main points. Content should be indepth. Also add sources of facts. And write like According to the or As per [source], [fact]. Make sure these points directly relate to the expectations, building anticipation and
    keeping viewers hooked. Keep it simple and very engaging. You have to respond based on the chat history.
    At last give an exciting one liner conclusion like  "Boom! Your life just got easier/better,etc. 
    Drop an emoji below if you're ready to level up." or "So there you have it. The [easy/unique/unbelievable] 
    way to [achieve desirable outcome]. Like, comment, and subscribe for more world-changing tips.".
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Tone_Agent_Reel = AssistantAgent(
    name="Tone_Agent_Reel",
    system_message="""
    Combine the outputs from the Intro_Hook_Agent and Content_Agent into a single cohesive script with a 
    seamless narrative flow, maintaining the introduction hook sentence. Do not explicitly mention agent 
    titles or add headings/labels. As a native American speaker, convert this into conversational verbal 
    English using the following guidelines: Occasionally repeat words, add brief pauses ("...."), and make minor 
    grammatical slips for an authentic tone. Use plain, friendly language avoiding excessive corporate jargon.
    Sparingly include verbal cues like "well," "you know," "like," and minimal filler words "um/uh."
    Pose the odd rhetorical questions, create a few from your side, examples to refer to -  "isn't that crazy?"
    or interjection like "whoa/wow/ugh" if fitting.The script should be complete with information it shouldn't hint at anything coming after the script.
    The goal is moderate, natural-sounding spoken English 
    conventions without forcing it. Do not add or modify content from the other agents.Keep it simple. Exclude emojis.
    Keep it concise, within a 100-word limit. Ensure your response aligns with previous chat results.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)

Reviewer_Agent = AssistantAgent(
    name="Reviewer",
    system_message="""
    You are Reviewer. Your task is to check and validate the facts in the content by Tone_Agent_Reel. If you find the facts are not 
    correct, either correct them or remove them. Also adjust sentent structure if you remove them. Don't do any other changes.
    """,
    llm_config={"config_list": config_list, "cache_seed": None},
)


def custom_speaker_selection_func(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Research_Agent
    elif last_speaker is Executor_Agent:
        return Title_agent
    elif last_speaker is Title_agent:
        return Content_Agent
    elif last_speaker is Content_Agent:
        return Tone_Agent
    elif last_speaker is Tone_Agent:
        return Intro_Hook_Agent
    elif last_speaker is Intro_Hook_Agent:
        return Outro_Agent
    elif last_speaker is Outro_Agent:
        return Formatter_Agent
    elif last_speaker is Formatter_Agent:
        return Spoken_English_Agent
    elif last_speaker is Spoken_English_Agent:
        save_json(last_speaker.last_message()["content"])
    else:
        return "auto"


def custom_speaker_selection_func1(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Transcript_Agent
    elif last_speaker is Executor_Agent:
        return Title_agent
    elif last_speaker is Title_agent:
        return Analyse_Agent
    elif last_speaker is Analyse_Agent:
        return Content_Agent
    elif last_speaker is Content_Agent:
        return Tone_Agent
    elif last_speaker is Tone_Agent:
        return Intro_Hook_Agent
    elif last_speaker is Intro_Hook_Agent:
        return Outro_Agent
    elif last_speaker is Outro_Agent:
        return Spoken_English_Agent
    elif last_speaker is Spoken_English_Agent:
        return Formatter_Agent
    elif last_speaker is Formatter_Agent:
        save_json(last_speaker.last_message()["content"])
    else:
        return "auto"


def custom_speaker_selection_func2(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Article_Analyse_Agent
    elif last_speaker is Article_Analyse_Agent:
        return Title_agent
    elif last_speaker is Title_agent:
        return Content_Agent
    elif last_speaker is Content_Agent:
        return Tone_Agent
    elif last_speaker is Tone_Agent:
        return Intro_Hook_Agent
    elif last_speaker is Intro_Hook_Agent:
        return Outro_Agent
    elif last_speaker is Outro_Agent:
        return Spoken_English_Agent
    elif last_speaker is Spoken_English_Agent:
        return Formatter_Agent
    elif last_speaker is Formatter_Agent:
        save_json(last_speaker.last_message()["content"])
    else:
        return "auto"


def custom_speaker_selection_func3(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Script_Analyse_Agent
    elif last_speaker is Script_Analyse_Agent:
        return Title_agent
    elif last_speaker is Title_agent:
        return Content_Agent
    elif last_speaker is Content_Agent:
        return Tone_Agent
    elif last_speaker is Tone_Agent:
        return Intro_Hook_Agent
    elif last_speaker is Intro_Hook_Agent:
        return Outro_Agent
    elif last_speaker is Outro_Agent:
        return Spoken_English_Agent
    elif last_speaker is Spoken_English_Agent:
        return Formatter_Agent
    elif last_speaker is Formatter_Agent:
        save_json(last_speaker.last_message()["content"])
    else:
        return "auto"


def custom_speaker_selection_func_reel(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Research_Agent
    elif last_speaker is Executor_Agent:
        return Intro_Hook_Agent_Reel
    elif last_speaker is Intro_Hook_Agent_Reel:
        return Content_Agent_Reel
    elif last_speaker is Content_Agent_Reel:
        return Tone_Agent_Reel
    elif last_speaker is Tone_Agent_Reel:
        return Reviewer_Agent
    elif last_speaker is Reviewer_Agent:
        save_json_reel(last_speaker.last_message()["content"])
    else:
        return "auto"


def custom_speaker_selection_func_reel1(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Transcript_Agent
    elif last_speaker is Executor_Agent:
        return Analyse_Agent
    elif last_speaker is Analyse_Agent:
        return Intro_Hook_Agent_Reel
    elif last_speaker is Intro_Hook_Agent_Reel:
        return Content_Agent_Reel
    elif last_speaker is Content_Agent_Reel:
        return Tone_Agent_Reel
    elif last_speaker is Tone_Agent_Reel:
        return Reviewer_Agent
    elif last_speaker is Reviewer_Agent:
        save_json_reel(last_speaker.last_message()["content"])
    else:
        return "auto"


def custom_speaker_selection_func_reel2(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Article_Analyse_Agent
    elif last_speaker is Article_Analyse_Agent:
        return Intro_Hook_Agent_Reel
    elif last_speaker is Intro_Hook_Agent_Reel:
        return Content_Agent_Reel
    elif last_speaker is Content_Agent_Reel:
        return Tone_Agent_Reel
    elif last_speaker is Tone_Agent_Reel:
        return Reviewer_Agent
    elif last_speaker is Reviewer_Agent:
        save_json_reel(last_speaker.last_message()["content"])
    else:
        return "auto"


def custom_speaker_selection_func_reel3(last_speaker: Agent, groupchat: GroupChat):
    messages = groupchat.messages
    if last_speaker is user_proxy:
        return Script_Analyse_Agent
    elif last_speaker is Script_Analyse_Agent:
        return Intro_Hook_Agent_Reel
    elif last_speaker is Intro_Hook_Agent_Reel:
        return Content_Agent_Reel
    elif last_speaker is Content_Agent_Reel:
        return Tone_Agent_Reel
    elif last_speaker is Tone_Agent_Reel:
        return Reviewer_Agent
    elif last_speaker is Reviewer_Agent:
        save_json_reel(last_speaker.last_message()["content"])
    else:
        return "auto"


def generate_script_using_video(task, video_type):

    if video_type == "long":
        groupchat = GroupChat(
            agents=[
                user_proxy,
                Transcript_Agent,
                Analyse_Agent,
                Tone_Agent,
                Title_agent,
                Intro_Hook_Agent,
                Content_Agent,
                Formatter_Agent,
                Outro_Agent,
                Spoken_English_Agent,
                Executor_Agent,
            ],
            messages=[],
            max_round=12,
            speaker_selection_method=custom_speaker_selection_func1,
        )

    else:

        groupchat = GroupChat(
            agents=[
                user_proxy,
                Transcript_Agent,
                Analyse_Agent,
                Tone_Agent_Reel,
                Intro_Hook_Agent_Reel,
                Content_Agent_Reel,
                Executor_Agent,
                Reviewer_Agent,
            ],
            messages=[],
            max_round=10,
            speaker_selection_method=custom_speaker_selection_func_reel1,
        )

    manager = GroupChatManager(
        groupchat=groupchat, llm_config={"config_list": config_list, "cache_seed": None}
    )

    with Cache.disk(cache_seed=43) as cache:
        chat_history = user_proxy.initiate_chat(
            manager, message=task, cache=cache, max_turns=1
        )


def generate_script_using_article(task, video_type):

    if video_type == "long":
        groupchat = GroupChat(
            agents=[
                user_proxy,
                Article_Analyse_Agent,
                Tone_Agent,
                Title_agent,
                Intro_Hook_Agent,
                Content_Agent,
                Formatter_Agent,
                Outro_Agent,
                Spoken_English_Agent,
            ],
            messages=[],
            max_round=12,
            speaker_selection_method=custom_speaker_selection_func2,
        )

    else:

        groupchat = GroupChat(
            agents=[
                user_proxy,
                Article_Analyse_Agent,
                Tone_Agent_Reel,
                Intro_Hook_Agent_Reel,
                Content_Agent_Reel,
                Reviewer_Agent,
            ],
            messages=[],
            max_round=10,
            speaker_selection_method=custom_speaker_selection_func_reel2,
        )

    manager = GroupChatManager(
        groupchat=groupchat, llm_config={"config_list": config_list, "cache_seed": None}
    )

    with Cache.disk(cache_seed=43) as cache:
        chat_history = user_proxy.initiate_chat(
            manager, message=task, cache=cache, max_turns=1
        )


def generate_script_using_data(task, video_type):

    if video_type == "long":
        groupchat = GroupChat(
            agents=[
                user_proxy,
                Script_Analyse_Agent,
                Tone_Agent,
                Title_agent,
                Intro_Hook_Agent,
                Content_Agent,
                Formatter_Agent,
                Outro_Agent,
                Spoken_English_Agent,
            ],
            messages=[],
            max_round=12,
            speaker_selection_method=custom_speaker_selection_func3,
        )

    else:

        groupchat = GroupChat(
            agents=[
                user_proxy,
                Script_Analyse_Agent,
                Tone_Agent_Reel,
                Intro_Hook_Agent_Reel,
                Content_Agent_Reel,
                Reviewer_Agent,
            ],
            messages=[],
            max_round=10,
            speaker_selection_method=custom_speaker_selection_func_reel3,
        )

    manager = GroupChatManager(
        groupchat=groupchat, llm_config={"config_list": config_list, "cache_seed": None}
    )

    with Cache.disk(cache_seed=43) as cache:
        chat_history = user_proxy.initiate_chat(
            manager, message=task, cache=cache, max_turns=1
        )


def generate_script_using_topic(task, video_type):

    if video_type == "long":
        groupchat = GroupChat(
            agents=[
                user_proxy,
                Research_Agent,
                Tone_Agent,
                Title_agent,
                Intro_Hook_Agent,
                Content_Agent,
                Formatter_Agent,
                Outro_Agent,
                Spoken_English_Agent,
                Executor_Agent,
            ],
            messages=[],
            max_round=12,
            speaker_selection_method=custom_speaker_selection_func,
        )

    else:

        groupchat = GroupChat(
            agents=[
                user_proxy,
                Research_Agent,
                Tone_Agent_Reel,
                Intro_Hook_Agent_Reel,
                Content_Agent_Reel,
                Executor_Agent,
                Reviewer_Agent,
            ],
            messages=[],
            max_round=10,
            speaker_selection_method=custom_speaker_selection_func_reel,
        )

    manager = GroupChatManager(
        groupchat=groupchat, llm_config={"config_list": config_list, "cache_seed": None}
    )

    with Cache.disk(cache_seed=44) as cache:
        chat_history = user_proxy.initiate_chat(
            manager, message=task, cache=cache, max_turns=1
        )


register_function(
    search_tool,
    caller=Research_Agent,
    executor=Executor_Agent,
    name="search_tool",
    description="Search the web for the given query",
)

register_function(
    get_transcription_from_video,
    caller=Transcript_Agent,
    executor=Executor_Agent,
    name="get_transcription_from_video",
    description="Search the web for the given query",
)
